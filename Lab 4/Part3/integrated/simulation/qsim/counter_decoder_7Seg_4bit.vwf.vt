// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/28/2021 13:15:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          counter_decoder_7Seg_4bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module counter_decoder_7Seg_4bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enable;
reg reset;
reg up_down;
// wires                                               
wire [6:0] Seg7;

// assign statements (if any)                          
counter_decoder_7Seg_4bit i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.enable(enable),
	.reset(reset),
	.Seg7(Seg7),
	.up_down(up_down)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// enable
initial
begin
	enable = 1'b1;
	enable = #125000 1'b0;
	# 125000;
	repeat(2)
	begin
		enable = 1'b1;
		enable = #125000 1'b0;
		# 125000;
	end
	enable = 1'b1;
	enable = #125000 1'b0;
end 

// reset
always
begin
	reset = 1'b0;
	reset = #250000 1'b1;
	#250000;
end 

// up_down
initial
begin
	up_down = 1'b1;
	up_down = #500000 1'b0;
end 
endmodule

